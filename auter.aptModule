#!/bin/bash
# This is a script that is intended to only be called by /usr/bin/auter and
# contains linux package manager specific code for auter.

# This is the apt-get version of this script intended for Ubuntu/Debian

# Exit if this script is executed directly
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  echo "ERROR: This script is used by auter and should not be executed directly. Exiting"
fi

function check_package_manager_lock() {
  # Set default values if the variables are undefined
  [[ $PACKAGEMANAGERLOCKRETRIES ]] || PACKAGEMANAGERLOCKRETRIES=5
  [[ $PACKAGEMANAGERLOCKWAITTIME ]] || PACKAGEMANAGERLOCKWAITTIME=60

  # This is a place holder function pending code for a check for apt-get locks
}

function prepare_updates() {
  # Run any pre-prep scripts
  for _script in "$PREPREPSCRIPTDIR"/*; do
    run_script "$_script" "Pre-Prep"
  done

  prepoutput="$(date '+%F %T')\\n"
  if [[ "$PREDOWNLOADUPDATES" == "yes" ]]; then
    if [[ $(man "$PACKAGE_MANAGER" | grep -c download-only) -gt 0 ]]; then
      $PACKAGE_MANAGER update &>/dev/null
      # Check if there are any errors when checking for updates
      local error_count available_package_count


      error_count=$("$PACKAGE_MANAGER" -u upgrade --assume-no "${PACKAGEMANAGEROPTIONS[@]}" | grep -c '^[WE]:')
      available_package_count=$("$PACKAGE_MANAGER" -u upgrade --assume-no "${PACKAGEMANAGEROPTIONS[@]}" | awk '/upgraded,.*newly installed,/ {sum=$1+$3} END {print sum}')

      if [[ $error_count -eq 0 ]]; then
        # If there are packages to be installed then download them.
        if [[ "$available_package_count" -gt 0 ]]; then
          sleep_delay=$((RANDOM % MAXDELAY))
          [[ $sleep_delay -gt 1 ]] && logit "INFO: Sleeping for $sleep_delay seconds"
          sleep $sleep_delay
          if [[ "$ONLYINSTALLFROMPREP" == "yes" ]]; then
            [[ -d "$DOWNLOADDIR/$CONFIGSET" ]] || mkdir -p "$DOWNLOADDIR/$CONFIGSET"
            downloadoption=("-o" "dir::cache::archives=$DOWNLOADDIR/$CONFIGSET")
            rm -f "$DOWNLOADDIR/$CONFIGSET"/*.deb
            DOWNLOADLOGMSG=" to $DOWNLOADDIR/$CONFIGSET"
          fi
          declare -x debian_frontend=noninteractive
          prepoutput=$("$PACKAGE_MANAGER" "${PACKAGEMANAGEROPTIONS[@]}" "${downloadoption[@]}" --download-only dist-upgrade -y 2>&1)
          if [[ $(echo "$prepoutput" | grep -c '^[WE]:') -gt 0 ]]; then
            logit "ERROR: There were errors returned by \`$PACKAGE_MANAGER ${PACKAGEMANAGEROPTIONS[*]} ${downloadoption[*]} --download-only dist-upgrade -y\`. Exiting."
            prepoutput+="\\nSTATUS:FAILED:Errors returned by package manager"
          else
            logit "INFO: Updates downloaded$DOWNLOADLOGMSG"
            prepoutput+="\\nSTATUS:SUCCESS:Package download complete"
          fi
        else [[ "$available_package_count" -eq 0 ]]
          logit "INFO: No updates are available to be downloaded."
          prepoutput+="STATUS:SUCCESS:No updates available"
        fi
      else
        logit "ERROR: There were errors returned by \`$PACKAGE_MANAGER -u upgrade --assume-no ${PACKAGEMANAGEROPTIONS[*]}\`. Exiting."
        prepoutput+="\\nSTATUS:FAILED:Errors returned by package manager"
      fi
    else
      if [[ "$ONLYINSTALLFROMPREP" == "yes" ]]; then
        logit "ERROR: downloadoption set to 'yes' but the '--downloadonly' option is not available in the current version of $PACKAGE_MANAGER"
        quit 3
      else
        logit "WARNING: downloadonly option is not available"
      prepoutput+="\\nSTATUS:Download only not available"
      fi
    fi
  else
    prepoutput+=$("$PACKAGE_MANAGER" "${PACKAGEMANAGEROPTIONS[@]}" -s dist-upgrade 2>&1)
  fi
  rotate_file "$DATADIR/last-prep-output-$CONFIGSET"
  [[ "$prepoutput" ]] && echo -e "$prepoutput" > "$DATADIR/last-prep-output-$CONFIGSET"

  # Run any post-prep scripts
  for _script in "$POSTPREPSCRIPTDIR"/*; do
    run_script "$_script" "Post-Prep"
  done

}

function apply_updates() {
  # Prevent dialog box as we are not running the update in interactive mode
  declare -x debian_frontend=noninteractive

  applyoutput="$(date '+%F %T')\\n"
  # Set the list of debs to be installed
  if [[ "$ONLYINSTALLFROMPREP" == "yes" ]]; then
    local available_packages available_package_count error_count

    if [[ $(find "$DOWNLOADDIR/$CONFIGSET" -name "*.deb" | wc -l) -gt 0 ]]; then
      available_packages=$("$PACKAGE_MANAGER" -u --just-print install --assume-no "${PACKAGEMANAGEROPTIONS[@]}" "${DOWNLOADDIR}/${CONFIGSET}"/*.deb 2>&1)
      echo "$available_packages" >"$DATADIR/last-apply-output-$CONFIGSET"
      available_package_count=$(echo "$available_packages" | awk '/upgraded,.*newly installed,/ {sum=$1+$3} END {print sum}')
      debs=("$DOWNLOADDIR/$CONFIGSET/"*.deb)
    else
      available_package_count=0
    fi

    # When passing DEBs to apt-get, the update verb won't install any that aren't already
    # installed (i.e. dependencies of other packages). Instead we need to use install.
    updateaction="install"
  else
    available_packages=$($PACKAGE_MANAGER -u upgrade --assume-no "${PACKAGEMANAGEROPTIONS[@]}" 2>&1)
    echo "$available_packages" >"$DATADIR/last-apply-output-$CONFIGSET"
    error_count=$(echo "$available_packages" | grep -c '^[WE]:')
    available_package_count=$(echo "$available_packages" | awk '/upgraded,.*newly installed,/ {sum=$1+$3} END {print sum}')
    updateaction="upgrade"
  fi

  if [[ $error_count -eq 0 ]]; then
    if [[ "$available_package_count" -gt 0 ]]; then
      local packages_before packages_after

      # Sleep before running pre-scripts and updates
      sleep_delay=$((RANDOM % MAXDELAY))
      [[ $sleep_delay -gt 1 ]] && logit "INFO: Sleeping for $sleep_delay seconds"
      sleep $sleep_delay

      for _script in "$PREAPPLYSCRIPTDIR"/*; do
        run_script "$_script" "Pre-Apply"
      done

      logit "INFO: Applying updates"
      packages_before=$(dpkg --list)

      # We don't want to allow the user to interrupt a yum/dnf/apt transaction or Bad Things Happen.
      echo "Trying to update"
      trap '' SIGINT SIGTERM
      if applyoutput=$("$PACKAGE_MANAGER" "$updateaction" "${PACKAGEMANAGEROPTIONS[@]}" -y "${debs[@]}" 2>&1); then
        applyoutput+="\\nSTATUS:SUCCESS:Package updates applied"
      else
        applyoutput+="\\nSTATUS:FAILED:Package updates failed"
      fi
      rotate_file "$DATADIR/last-apply-output-$CONFIGSET"
      echo -e "$applyoutput" &>"$DATADIR/last-apply-output-$CONFIGSET"
      default_signal_handling

      packages_after=$(dpkg --list)

      if [[ "$packages_before" == "$packages_after" ]]; then
        logit "WARNING: No updates were applied. $(echo "$applyoutput" | grep 'upgraded,.*installed,')"
        quit 3
      fi

      logit "INFO: Updates complete. You may need to reboot for some updates to take effect"
      log_last_run

      for _script in "$POSTAPPLYSCRIPTDIR"/*; do
        run_script "$_script" "Post-Apply"
      done

      # Excluding this check because the REBOOTCALL variable is used by the main auter script
      # shellcheck disable=SC2034
      [[ "$AUTOREBOOT" == "yes" ]] && REBOOTCALL=1

    else
      logit "INFO: No updates are available to be applied."
      applyoutput+="\\nSTATUS:SUCCESS:No updates available"
      echo -e "$applyoutput" > "$DATADIR/last-apply-output-$CONFIGSET"
      log_last_run
    fi
  else
    logit "ERROR: Exit status $RC returned by \`$PACKAGE_MANAGER -u upgrade --assume-no ${PACKAGEMANAGEROPTIONS[*]}\`. Exiting."
    applyoutput+="\\nSTATUS:FAILED:Updates failed with status $RC"
    echo -e "$applyoutput" > "$DATADIR/last-apply-output-$CONFIGSET"
    quit 3
  fi
}
